// <auto-generated />
using System;
using ManageDisco.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManageDisco.Migrations
{
    [DbContext(typeof(DiscoContext))]
    [Migration("20220515172124_TABLE_MINBUDGET")]
    partial class TABLE_MINBUDGET
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ManageDisco.Model.AnonymusAllowed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectedPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnonymusAllowed");
                });

            modelBuilder.Entity("ManageDisco.Model.Catalog", b =>
                {
                    b.Property<int>("CatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatalogId");

                    b.ToTable("Catalog");
                });

            modelBuilder.Entity("ManageDisco.Model.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ManageDisco.Model.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("ManageDisco.Model.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CouponValidated")
                        .HasColumnType("bit");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CouponId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("ManageDisco.Model.DiscoEntity", b =>
                {
                    b.Property<string>("DiscoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscoAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscoCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscoCityCap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscoClosingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscoOpeningTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscoProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscoVatCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscoId");

                    b.ToTable("DiscoEntity");
                });

            modelBuilder.Entity("ManageDisco.Model.EventParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EntrancePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FreeEntranceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FreeEntranceEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TablePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ManageDisco.Model.EventPhoto", b =>
                {
                    b.Property<int>("EventPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventPhotoEventId")
                        .HasColumnType("int");

                    b.Property<string>("EventPhotoImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoTypeId")
                        .HasColumnType("int");

                    b.HasKey("EventPhotoId");

                    b.HasIndex("PhotoTypeId");

                    b.ToTable("EventPhoto");
                });

            modelBuilder.Entity("ManageDisco.Model.EventStatus", b =>
                {
                    b.Property<int>("EventStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventStatusId");

                    b.ToTable("EventStatus");
                });

            modelBuilder.Entity("ManageDisco.Model.HomePhoto", b =>
                {
                    b.Property<int>("HomePhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HomePhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoTypeId")
                        .HasColumnType("int");

                    b.HasKey("HomePhotoId");

                    b.HasIndex("PhotoTypeId");

                    b.ToTable("HomePhoto");
                });

            modelBuilder.Entity("ManageDisco.Model.PaymentOverview", b =>
                {
                    b.Property<int>("PaymentOverviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("TotalCreditPayed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCreditResume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalIncoming")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentOverviewId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentOverview");
                });

            modelBuilder.Entity("ManageDisco.Model.PermissionAction", b =>
                {
                    b.Property<int>("PermissionActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Methods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionActionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionActionId");

                    b.ToTable("PermissionAction");
                });

            modelBuilder.Entity("ManageDisco.Model.PhotoType", b =>
                {
                    b.Property<int>("PhotoTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PhotoTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoTypeMaxNumber")
                        .HasColumnType("int");

                    b.HasKey("PhotoTypeId");

                    b.ToTable("PhotoType");
                });

            modelBuilder.Entity("ManageDisco.Model.PrCustomer", b =>
                {
                    b.Property<int>("PrCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrCustomerCustomerid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrCustomerPrId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrCustomerId");

                    b.ToTable("PrCustomer");
                });

            modelBuilder.Entity("ManageDisco.Model.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductShopTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ProductShopTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ManageDisco.Model.ProductShopHeader", b =>
                {
                    b.Property<int>("ProductShopHeaderIdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductShopHeaderDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductShopHeaderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductShopHeaderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductShopImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductShopTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductShopHeaderIdId");

                    b.HasIndex("ProductShopTypeId");

                    b.ToTable("ProductShopHeader");
                });

            modelBuilder.Entity("ManageDisco.Model.ProductShopRow", b =>
                {
                    b.Property<int>("ProductShopRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductShopHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductShopRowQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductShopRowId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductShopHeaderId");

                    b.ToTable("ProductShopRow");
                });

            modelBuilder.Entity("ManageDisco.Model.ProductShopType", b =>
                {
                    b.Property<int>("ProductShopTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductShopTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductShopTypeId");

                    b.ToTable("ProductShopType");
                });

            modelBuilder.Entity("ManageDisco.Model.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RefreshTokenClientSession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RefreshTokenIsValid")
                        .HasColumnType("bit");

                    b.Property<long>("RefreshTokenLifetime")
                        .HasColumnType("bigint");

                    b.Property<string>("RefreshTokenUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreskTokenUserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("ManageDisco.Model.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventPartyId")
                        .HasColumnType("int");

                    b.Property<string>("ReservationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationConfirmationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationExpectedBudget")
                        .HasColumnType("int");

                    b.Property<string>("ReservationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationPeopleCount")
                        .HasColumnType("int");

                    b.Property<int>("ReservationRealBudget")
                        .HasColumnType("int");

                    b.Property<int>("ReservationRealPeopleCount")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReservationTableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReservationUserCodeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIdOwner")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationId");

                    b.HasIndex("EventPartyId");

                    b.HasIndex("ReservationStatusId");

                    b.HasIndex("ReservationTypeId");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("ManageDisco.Model.ReservationPayment", b =>
                {
                    b.Property<int>("ReservationPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ReservationPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservationPaymentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationPaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationPayment");
                });

            modelBuilder.Entity("ManageDisco.Model.ReservationStatus", b =>
                {
                    b.Property<int>("ReservationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReservationStatusValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationStatusId");

                    b.ToTable("ReservationStatus");
                });

            modelBuilder.Entity("ManageDisco.Model.ReservationType", b =>
                {
                    b.Property<int>("ReservationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReservationTypeString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationTypeId");

                    b.ToTable("ReservationType");
                });

            modelBuilder.Entity("ManageDisco.Model.ReservationUserCode", b =>
                {
                    b.Property<int>("ReservationUserCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReservationUserCodeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationUserCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationUserCode");
                });

            modelBuilder.Entity("ManageDisco.Model.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscoEntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableAreaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TableMinBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TableNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableId");

                    b.HasIndex("DiscoEntityId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("ManageDisco.Model.TableCouponUsed", b =>
                {
                    b.Property<int>("TableCouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TableCouponCouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableCouponEventId")
                        .HasColumnType("int");

                    b.Property<int>("TableCouponTableId")
                        .HasColumnType("int");

                    b.HasKey("TableCouponId");

                    b.ToTable("TableCouponUsed");
                });

            modelBuilder.Entity("ManageDisco.Model.TableOrderHeader", b =>
                {
                    b.Property<int>("TableOrderHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("TableOrderHeaderCouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TableOrderHeaderExit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TableOrderHeaderSpending")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TableOrderHeaderId");

                    b.HasIndex("TableId");

                    b.ToTable("TableOrderHeader");
                });

            modelBuilder.Entity("ManageDisco.Model.TableOrderRow", b =>
                {
                    b.Property<int>("TableOrderRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TableOrderHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("TableOrderRowQuantity")
                        .HasColumnType("int");

                    b.HasKey("TableOrderRowId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TableOrderHeaderId");

                    b.ToTable("TableOrderRow");
                });

            modelBuilder.Entity("ManageDisco.Model.UserIdentity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscoEntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DiscoEntityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ManageDisco.Model.UserPermission", b =>
                {
                    b.Property<int>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("PermissionActionAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionActionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserPermissionId");

                    b.HasIndex("PermissionActionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("ManageDisco.Model.UserProduct", b =>
                {
                    b.Property<int>("UserProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductShopHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserProductUsed")
                        .HasColumnType("bit");

                    b.HasKey("UserProductId");

                    b.HasIndex("ProductShopHeaderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProduct");
                });

            modelBuilder.Entity("ManageDisco.Model.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseQuantity")
                        .HasColumnType("int");

                    b.HasKey("WarehouseId");

                    b.HasIndex("ProductId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ReservationReservationPayment", b =>
                {
                    b.Property<int>("ReservationPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationsReservationId")
                        .HasColumnType("int");

                    b.HasKey("ReservationPaymentId", "ReservationsReservationId");

                    b.HasIndex("ReservationsReservationId");

                    b.ToTable("ReservationReservationPayment");
                });

            modelBuilder.Entity("ManageDisco.Model.Contact", b =>
                {
                    b.HasOne("ManageDisco.Model.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("ManageDisco.Model.Coupon", b =>
                {
                    b.HasOne("ManageDisco.Model.EventParty", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManageDisco.Model.EventPhoto", b =>
                {
                    b.HasOne("ManageDisco.Model.PhotoType", "PhotoType")
                        .WithMany()
                        .HasForeignKey("PhotoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhotoType");
                });

            modelBuilder.Entity("ManageDisco.Model.HomePhoto", b =>
                {
                    b.HasOne("ManageDisco.Model.PhotoType", "PhotoType")
                        .WithMany()
                        .HasForeignKey("PhotoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhotoType");
                });

            modelBuilder.Entity("ManageDisco.Model.PaymentOverview", b =>
                {
                    b.HasOne("ManageDisco.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManageDisco.Model.Product", b =>
                {
                    b.HasOne("ManageDisco.Model.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.ProductShopType", "ProductShopType")
                        .WithMany()
                        .HasForeignKey("ProductShopTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("ProductShopType");
                });

            modelBuilder.Entity("ManageDisco.Model.ProductShopHeader", b =>
                {
                    b.HasOne("ManageDisco.Model.ProductShopType", "ProductShopType")
                        .WithMany()
                        .HasForeignKey("ProductShopTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductShopType");
                });

            modelBuilder.Entity("ManageDisco.Model.ProductShopRow", b =>
                {
                    b.HasOne("ManageDisco.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.ProductShopHeader", "ProductShopHeader")
                        .WithMany()
                        .HasForeignKey("ProductShopHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductShopHeader");
                });

            modelBuilder.Entity("ManageDisco.Model.Reservation", b =>
                {
                    b.HasOne("ManageDisco.Model.EventParty", "EventParty")
                        .WithMany()
                        .HasForeignKey("EventPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.ReservationStatus", "ReservationStatus")
                        .WithMany()
                        .HasForeignKey("ReservationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.ReservationType", "ReservationType")
                        .WithMany()
                        .HasForeignKey("ReservationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.HasOne("ManageDisco.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EventParty");

                    b.Navigation("ReservationStatus");

                    b.Navigation("ReservationType");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManageDisco.Model.ReservationPayment", b =>
                {
                    b.HasOne("ManageDisco.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManageDisco.Model.ReservationUserCode", b =>
                {
                    b.HasOne("ManageDisco.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManageDisco.Model.Table", b =>
                {
                    b.HasOne("ManageDisco.Model.DiscoEntity", "DiscoEntity")
                        .WithMany()
                        .HasForeignKey("DiscoEntityId");

                    b.Navigation("DiscoEntity");
                });

            modelBuilder.Entity("ManageDisco.Model.TableOrderHeader", b =>
                {
                    b.HasOne("ManageDisco.Model.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ManageDisco.Model.TableOrderRow", b =>
                {
                    b.HasOne("ManageDisco.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.TableOrderHeader", "TableOrderHeader")
                        .WithMany()
                        .HasForeignKey("TableOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("TableOrderHeader");
                });

            modelBuilder.Entity("ManageDisco.Model.UserIdentity.User", b =>
                {
                    b.HasOne("ManageDisco.Model.DiscoEntity", "DiscoEntity")
                        .WithMany()
                        .HasForeignKey("DiscoEntityId");

                    b.Navigation("DiscoEntity");
                });

            modelBuilder.Entity("ManageDisco.Model.UserPermission", b =>
                {
                    b.HasOne("ManageDisco.Model.PermissionAction", "PermissionAction")
                        .WithMany()
                        .HasForeignKey("PermissionActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PermissionAction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManageDisco.Model.UserProduct", b =>
                {
                    b.HasOne("ManageDisco.Model.ProductShopHeader", "ProductShopHeader")
                        .WithMany()
                        .HasForeignKey("ProductShopHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.UserIdentity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ProductShopHeader");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManageDisco.Model.Warehouse", b =>
                {
                    b.HasOne("ManageDisco.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ManageDisco.Model.UserIdentity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ManageDisco.Model.UserIdentity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.UserIdentity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ManageDisco.Model.UserIdentity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReservationReservationPayment", b =>
                {
                    b.HasOne("ManageDisco.Model.ReservationPayment", null)
                        .WithMany()
                        .HasForeignKey("ReservationPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageDisco.Model.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
